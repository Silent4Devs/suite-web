services:
  postgres-tabantaj:
    image: postgres:16-alpine
    container_name: postgres-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      # - ./infra/postgres/data:/var/lib/postgresql/data #localpath
      - tabantaj-database:/var/lib/postgresql/data
      - ./infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=homestead
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=homestead
    ports:
      - "5432:5432"
    networks:
      - tabantajnetwork
    mem_limit: 6g

  php:
    #uncomment this if you will use only docker compose
    build:
      context: "."
      dockerfile: Dockerfile
    #     # target: php-production  # Specify the target build stage if applicable
    #     # args:
    #     # - BUILD_ENV=production  # Pass any necessary build arguments
    # #container_name: php-tabantaj
    #uncomment this if you will use only docker compose
    #image: johnvo95/tabantaj_php-tabantaj:latest
    entrypoint: php artisan octane:frankenphp --workers=1 --max-requests=250
    container_name: php-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      - .:/app
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - 80:8000
      - 443:443
      - 443:443/udp
    networks:
      - tabantajnetwork

  queue-worker:
    build:
      context: "."
      dockerfile: Dockerfile
    volumes:
      - .:/app
    command: php artisan queue:work --tries=3
    depends_on:
      - php
    container_name: queue-worker-tabantaj
    restart: unless-stopped
    tty: true
    environment:
      CONTAINER_ROLE: queue
    networks:
      - tabantajnetwork

  schedule-worker:
    build:
      context: "."
      dockerfile: Dockerfile
    depends_on:
      - php
    restart: unless-stopped
    tty: true
    container_name: schedule-worker-tabantaj
    volumes:
      - .:/app
    command: php artisan schedule:work
    environment:
      CONTAINER_ROLE: scheduler
    networks:
      - tabantajnetwork

  redis-tabantaj:
    image: redis:alpine
    container_name: redis-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf # Mount the Redis configuration file
      - ./infra/redis/sysctl.conf:/etc/sysctl.conf # Mount the sysctl configuration file
    networks:
      - tabantajnetwork
    mem_limit: 3g

  # rabbitmq-tabantaj:
  #   image: rabbitmq:3-management-alpine
  #   container_name: rabbitmq-tabantaj
  #   env_file:
  #     - .env
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   restart: unless-stopped
  #   tty: true
  #   networks:
  #     - tabantajnetwork
  #   # networks:
  #   #   - tabantajnetwork
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq

  goservices:
    image: ghcr.io/silent4devs/goservices:latest
    container_name: goservices
    restart: unless-stopped
    tty: true
    ports:
      - "3300:3300"
    volumes:
      - goservices_data:/goservices
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork

  reportservice:
    image: ghcr.io/silent4devs/reportservice:latest
    container_name: reportservice
    restart: unless-stopped
    tty: true
    ports:
      - "3301:3301"
    volumes:
      - reportservice_data:/reportservice
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork

volumes:
  tabantaj-database:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  reportservice_data:
    driver: local
  # rabbitmq_data:
  #   driver: local
  # pgadmin-data:
  #   driver: local
  goservices_data:
    driver: local
  # elasticsearch:
  #   driver: local
  # elasticsearch-logs:
  #   driver: local

networks:
  tabantajnetwork:
    driver: bridge
