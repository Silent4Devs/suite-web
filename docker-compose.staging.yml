services:
  # nginx-tabantaj:
  #   image: nginx:stable-alpine
  #   container_name: nginx-tabantaj
  #   restart: unless-stopped
  #   tty: true
  #   ports:
  #     - 80:80
  #     - 443:443
  #     # - 8080:8080
  #   volumes:
  #     - .:/var/www/html
  #     - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./infra/nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - php
  #     - postgres-tabantaj
  #     - redis-tabantaj
  #   env_file:
  #     - .env
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "30m"
  #       max-file: "1"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:80"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s
  #   networks:
  #     - tabantajnetwork

  postgres-tabantaj:
    image: postgres:16-alpine
    container_name: postgres-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      # - ./infra/postgres/data:/var/lib/postgresql/data #localpath
      - tabantaj-db:/var/lib/postgresql/data
      #- ./infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    env_file:
      - .env
    ports:
      - "5432:5432"
    # networks:
    #   - tabantajnetwork
    networks:
      - tabantajnetwork
    mem_limit: 6g

  php:
    #uncomment this if you will use only docker compose
    build:
      context: "."
      dockerfile: Dockerfile.prod
    entrypoint: php artisan octane:frankenphp --workers=1 --max-requests=500
    container_name: php-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      - .:/var/www/html
    ports:
      - 80:8000
      - 443:443
      - 443:443/udp
    networks:
      - tabantajnetwork

  queue-worker:
    build:
      context: "."
      dockerfile: Dockerfile.prod
    volumes:
      - .:/var/www/html
    command: php artisan queue:work --tries=6
    depends_on:
      - php
    container_name: queue-worker-tabantaj
    restart: unless-stopped
    tty: true
    environment:
      CONTAINER_ROLE: queue
    networks:
      - tabantajnetwork
    mem_limit: 2g

  schedule-worker:
    build:
      context: "."
      dockerfile: Dockerfile.prod
    depends_on:
      - php
    restart: unless-stopped
    tty: true
    container_name: schedule-worker-tabantaj
    volumes:
      - .:/var/www/html
    command: php artisan schedule:work
    environment:
      CONTAINER_ROLE: scheduler
    networks:
      - tabantajnetwork
    mem_limit: 2g

  redis-tabantaj:
    image: redis:alpine
    container_name: redis-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf # Mount the Redis configuration file
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork
    mem_limit: 2g

  rdadmin-tabantaj:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: rdadmin-tabantaj
    restart: unless-stopped
    tty: true
    ports:
      - 6360:80
    env_file:
      - .env
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork

  rabbitmq-tabantaj:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-tabantaj
    env_file:
      - .env
    ports:
      - 5672:5672
      - 15672:15672
    restart: unless-stopped
    tty: true
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  goservices:
    image: ghcr.io/silent4devs/goservices:latest
    container_name: goservices
    restart: unless-stopped
    tty: true
    ports:
      - "3300:3300"
    volumes:
      - goservices_data:/goservices
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork

  reportservice:
    image: ghcr.io/silent4devs/reportservice:latest
    container_name: reportservice
    restart: unless-stopped
    tty: true
    ports:
      - "3301:3301"
    volumes:
      - reportservice_data:/reportservice
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork

  mailhog-service:
    image: mailhog/mailhog # Reemplaza "imagen:tag" con la imagen y etiqueta correctas de Maihog
    container_name: maihog-container # El nombre del contenedor
    restart: unless-stopped
    tty: true
    ports:
      - "1025:1025" # Reemplaza "puerto_host" y "puerto_contenedor" con los puertos necesarios
      - "8025:8025"
    volumes:
      - mailhog_data:/mailhog_data # Reemplaza "./ruta/local" con la ruta local y "/ruta/contenedor" con la ruta dentro del contenedor
    networks:
      - tabantajnetwork
    # networks:
    #   - tabantajnetwork

  # elasticsearch:
  #   image: elasticsearch:8.11.1
  #   container_name: elasticsearch
  #   restart: always
  #   volumes:
  #     - elastic-data-vl:/usr/share/elasticsearch/data/
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx256m -Xms256m"
  #     bootstrap.memory_lock: true
  #     discovery.type: single-node
  #     xpack.license.self_generated.type: basic
  #     xpack.security.enabled: false
  #   ports:
  #     - "9200:9200"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   networks:
  #     - tabantajnetwork
  #   # networks:
  #   #   - tabantajnetwork

  # logstash:
  #   image: logstash:8.11.1
  #   container_name: logstash
  #   restart: always
  #   volumes:
  #     - ./infra/logstash/:/logstash_dir
  #   command: logstash -f /logstash_dir/logstash.conf
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - "5044:5044"
  #     - "9600:9600"
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   networks:
  #     - tabantajnetwork
  #   # networks:
  #   #   - tabantajnetwork

  # Kibana:
  #   image: kibana:8.11.1
  #   container_name: kibana
  #   restart: always
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #     - ELASTIC_PACKAGE_REGISTRY_URL=elastic-package-registry:8080
  #   volumes:
  #     - ./infra/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - tabantajnetwork

  # filebeat:
  #   image: elastic/filebeat:8.11.1
  #   container_name: filebeat
  #   user: root
  #   platform: linux/amd64
  #   volumes:
  #     - ./infra/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #     - ./storage/logs:/var/log/ELK-log-manager #Be careful about this line if you put this file in another path this line maybe need change (in my case I put 'docker-compose.yml' in directory named 'elk' which placed in the root of Laravel app so to reach the path of log files I use '../storage/logs')
  #   environment:
  #     - monitoring.enabled= true
  #   depends_on:
  #     - logstash
  #     - elasticsearch
  #   command: ["--strict.perms=false"]
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   stdin_open: true
  #   tty: true
  #   deploy:
  #     mode: global
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "12m"
  #       max-file: "100"
  #   networks:
  #     - tabantajnetwork
  #   # networks:
  #   #   - tabantajnetwork

  # elastic-package-registry:
  #   image: docker.elastic.co/package-registry/distribution:8.11.1
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - tabantajnetwork
  #   # networks:
  #   #   - tabantajnetwork

volumes:
  tabantaj-db:
    driver: local
  # caddy_data:
  #   driver: local
  # caddy_config:
  #   driver: local
  rabbitmq_data:
    driver: local
  pgadmin-data:
    driver: local
  goservices_data:
    driver: local
  reportservice_data:
    driver: local
  mailhog_data:
    driver: local
  # elastic-data-vl:
  #   driver: local
  # elasticsearch:
  #   driver: local
  # elasticsearch-logs:
  #   driver: local

networks:
  tabantajnetwork:
    driver: bridge
