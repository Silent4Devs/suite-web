version: "3.8"
services:
  nginx-tabantaj:
    image: nginx:stable-alpine
    container_name: nginx-tabantaj
    restart: unless-stopped
    tty: true
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - .:/var/www/html
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - php
      - postgres-tabantaj
      - redis-tabantaj
    networks:
      - tabantajnetwork

  postgres-tabantaj:
    image: postgres:16-alpine
    container_name: postgres-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      # - ./infra/postgres/data:/var/lib/postgresql/data #localpath
      - tabantaj-db:/var/lib/postgresql/data
      - ./infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - tabantajnetwork
    mem_limit: 6g

  pgadmin-tabantaj:
    depends_on:
      - postgres-tabantaj
    image: dpage/pgadmin4:latest
    ports:
      - "5480:80"
    env_file:
      - .env
    restart: unless-stopped
    tty: true
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - tabantajnetwork

  php:
    #uncomment this if you will use only docker compose
    build:
      context: "./infra/php/"
      dockerfile: Dockerfile
    #     # target: php-production  # Specify the target build stage if applicable
    #     # args:
    #     # - BUILD_ENV=production  # Pass any necessary build arguments
    # #container_name: php-tabantaj
    #uncomment this if you will use only docker compose
    #image: johnvo95/tabantaj_php-tabantaj:latest
    container_name: php-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      - .:/var/www/html
    ports:
      - 9000:80
    networks:
      - tabantajnetwork

  queue-worker:
    build:
      context: "./infra/php/"
      dockerfile: Dockerfile
    volumes:
      - .:/var/www/html
    command: php artisan queue:work --tries=3
    depends_on:
      - php
    container_name: queue-worker-tabantaj
    restart: unless-stopped
    tty: true
    environment:
      CONTAINER_ROLE: queue
    networks:
      - tabantajnetwork

  schedule-worker:
    build:
      context: "./infra/php/"
      dockerfile: Dockerfile
    depends_on:
      - php
    restart: unless-stopped
    tty: true
    container_name: schedule-worker-tabantaj
    volumes:
      - .:/var/www/html
    command: php artisan schedule:work
    environment:
      CONTAINER_ROLE: scheduler
    networks:
      - tabantajnetwork

  redis-tabantaj:
    image: redis:alpine
    container_name: redis-tabantaj
    restart: unless-stopped
    tty: true
    volumes:
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf # Mount the Redis configuration file
    networks:
      - tabantajnetwork
    mem_limit: 2g

  rdadmin-tabantaj:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: rdadmin-tabantaj
    restart: unless-stopped
    tty: true
    ports:
      - 6360:80
    env_file:
      - .env
    networks:
      - tabantajnetwork

  rabbitmq-tabantaj:
    image: rabbitmq:3-management-alpine
    container_name: rabbit-tabantaj
    env_file:
      - .env
    ports:
      - 5672:5672
      - 15672:15672
    restart: unless-stopped
    tty: true
    networks:
      - tabantajnetwork
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  goservices:
    image: ghcr.io/silent4devs/goservices:latest
    container_name: goservices
    restart: unless-stopped
    tty: true
    ports:
      - "3300:3300"
    volumes:
      - goservices_data:/goservices
    networks:
      - tabantajnetwork

  reportservice:
    image: ghcr.io/silent4devs/reportservice:latest
    container_name: reportservice
    restart: unless-stopped
    tty: true
    ports:
      - "3301:3301"
    volumes:
      - reportservice_data:/reportservice
    networks:
      - tabantajnetwork

  mailhog-service:
    image: mailhog/mailhog # Reemplaza "imagen:tag" con la imagen y etiqueta correctas de Maihog
    container_name: maihog-container # El nombre del contenedor
    restart: unless-stopped
    tty: true
    ports:
      - "1025:1025" # Reemplaza "puerto_host" y "puerto_contenedor" con los puertos necesarios
      - "8025:8025"
    volumes:
      - mailhog_data:/mailhog_data # Reemplaza "./ruta/local" con la ruta local y "/ruta/contenedor" con la ruta dentro del contenedor
    networks:
      - tabantajnetwork

  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: elasticsearch
    restart: always
    volumes:
      - elastic-data-vl:/usr/share/elasticsearch/data/
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      bootstrap.memory_lock: true
      discovery.type: single-node
      xpack.license.self_generated.type: basic
      xpack.security.enabled: false
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - tabantajnetwork

  logstash:
    image: logstash:8.11.1
    container_name: logstash
    restart: always
    volumes:
      - ./infra/logstash/:/logstash_dir
    command: logstash -f /logstash_dir/logstash.conf
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - tabantajnetwork

  # Kibana:
  #   image: kibana:8.11.1
  #   container_name: kibana
  #   restart: always
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - tabantajnetwork

  filebeat:
    image: elastic/filebeat:8.11.1
    container_name: filebeat
    user: root
    platform: linux/amd64
    volumes:
      - ./infra/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./storage/logs:/var/log/ELK-log-manager #Be careful about this line if you put this file in another path this line maybe need change (in my case I put 'docker-compose.yml' in directory named 'elk' which placed in the root of Laravel app so to reach the path of log files I use '../storage/logs')
    environment:
      - monitoring.enabled= true
    depends_on:
      - logstash
      - elasticsearch
    command: ["--strict.perms=false"]
    ulimits:
      memlock:
        soft: -1
        hard: -1
    stdin_open: true
    tty: true
    deploy:
      mode: global
    logging:
      driver: 'json-file'
      options:
        max-size: '12m'
        max-file: "100"
    networks:
      - tabantajnetwork

volumes:
  tabantaj-db:
    driver: local
  rabbitmq_data:
    driver: local
  pgadmin-data:
    driver: local
  goservices_data:
    driver: local
  reportservice_data:
    driver: local
  mailhog_data:
    driver: local
  elastic-data-vl:
    driver: local
  # elasticsearch:
  #   driver: local
  # elasticsearch-logs:
  #   driver: local

networks:
  tabantajnetwork:
#elasticsearch-logs-tabantaj:
#   image: docker.elastic.co/elasticsearch/elasticsearch:8.8.1
#   container_name: elasticsearch-logs-tabantaj
#   environment:
#     - node.name=elasticsearch-logs
#     - cluster.name=docker-cluster
#     - discovery.type=single-node
#     - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
#   ulimits:
#     memlock:
#       soft: -1
#       hard: -1
#   volumes:
#     - elasticsearch-logs:/usr/share/elasticsearch/data
#   ports:
#     - 9201:9200
#     - 9301:9300
#   networks:
#     - tabantajnetwork
# prometheus-tabantaj:
#   image: prom/prometheus
#   container_name: prometheus-tabantaj
#   restart: unless-stopped
#   tty: true
#   ports:
#     - 9090:9090
#   volumes:
#     - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#   networks:
#     - tabantajnetwork

# prometheus-node-exporter-tabantaj:
#   image: prom/node-exporter:latest
#   container_name: prometheus-node-exporter-tabantaj
#   restart: unless-stopped
#   volumes:
#     - /proc:/host/proc:ro
#     - /sys:/host/sys:ro
#     - /:/rootfs:ro
#   command:
#     - '--path.procfs=/host/proc'
#     - '--path.sysfs=/host/sys'
#     - --collector.filesystem.ignored-mount-points
#     - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#   networks:
#     - tabantajnetwork
#   privileged: true
#   depends_on:
#     - prometheus-tabantaj
#   ports:
#     - 9101:9100

# redis-exporter-tabantaj:
#   image: oliver006/redis_exporter:v1.22.0-alpine
#   container_name: redis-exporter-tabantaj
#   restart: unless-stopped
#   tty: true
#   ports:
#     - 9121:9121
#   networks:
#     - tabantajnetwork
#   environment:
#     REDIS_ADDR: "redis-tabantaj:6379"
#     REDIS_USER: null
#     REDIS_PASS: null
#   # command:
#   #   - --redis.addr=redis-tabantaj:6379

# nginx-exporter-tabantaj:
#   image: nginx/nginx-prometheus-exporter:latest
#   container_name: nginx-exporter-tabantaj
#   restart: unless-stopped
#   tty: true
#   ports:
#     - 9113:9113
#   command:
#     - -nginx.scrape-uri=http://nginx-tabantaj:8080/stub_status
#   networks:
#     - tabantajnetwork

# postgres-exporter-tabantaj:
#   image: prometheuscommunity/postgres-exporter
#   ports:
#     - 9187:9187
#   environment:
#     DATA_SOURCE_NAME: "postgresql://homestead:secret@postgres-tabantaj:5432/homestead?sslmode=disable"
#   networks:
#     - tabantajnetwork

# grafana-tabantaj:
#   image: grafana/grafana:8.1.8
#   container_name: grafana-tabantaj
#   restart: unless-stopped
#   tty: true
#   volumes:
#     - /opt/grafana:/etc/grafana/provisioning
#   ports:
#     - 3000:3000
#   networks:
#     - tabantajnetwork
